//前提了解linux基础和gcc还有gdb编译最重要的是学会c/c++.
//以上这些我跳过了
// 从打造vim的ide开始,gcc和gdb就当作复习了
//  ide就是设置vim
// gcc编译可执行成序4步骤:预处理,编译,汇编,连接.
//  预处理:展开宏,头文件,替换条件编译,删除注释,空行,空白	gcc -E
//	编译:检查语法规范	gcc -S
//	汇编:将汇编指令翻译成机器指令 gcc -c
//	连接:数据段合并,数据地址回(动态库会讲).	填无参数(-o是指定生成连接的名字的,也就是起名字)
//   如:hello.c -预处理> hello.i -编译> hello.s -汇编> hello.o -连接> a.out
//	注意:在编译阶段消耗时间和系统资源最多
//指定头文件 
// 当头文件和源码不在一个文件夹内需要指定
//  gcc -I 头文件位置 -o hello
// 加上-c只做预处理,编译,汇编,二进制文件
// 加上-g编译出来的程序是可以调试的,不加不可调试,在输出程序上大小会不同,同时加了-g是可以在gdb中调试
// -On n=0-3 优化编译,n越大优化得越多,默认2级(嵌入式编程会用到)
// -D 向程序中"动态"注册宏定义,也就是源代码中必须有个检测宏的函数也就是#ifdef 名字 ...(如果这个宏被创建出来了会再执行这里的程序)... #endif,一般是在设置开关的时候会用到,类似测试人员玩游戏有特权
// 
// gcc编译总结
//	4步骤;预处理,编译,汇编,连接(如果有错误,有行号的是编译出了问题,找不到是连接出了问题)
//	-I	指定头文件所在目录位置
//	-c	只做预处理,编译,汇编,得到二进制文件
//	-g	编译时添加调试语句.主要支持gdb调试
//	-Wall	显示所有警告信息,还有 -Werr把所有的警告当成错误信息
//	-D	向程序中"动态"注册宏定义
//	-On n=0-3 优化编译,n越大优化得越多
// 提示vim里的删除其实就是剪切,因为会放在缓冲区,sed按行拆分,awk按列拆分
// /g是替换所有,不加只替换每行首个
